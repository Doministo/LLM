import streamlit as st
import requests
import json
from datetime import datetime
import wikipedia
import pandas as pd
import docx
import fitz  # from PyMuPDF
import io
from bs4 import BeautifulSoup
import traceback
import logging
import re
import pygments
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter
from pygments import highlight
import os
import time

# Configure logging - mus√≠ b√Ωt na zaƒç√°tku
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
st.set_page_config(
    page_title="LLM Chat ‚Äì Ollama",
    page_icon="ü§ñ",
    layout="wide",
    menu_items={'About': "### Lok√°ln√≠ LLM chat pomoc√≠ Ollama a Streamlit"}
)

# CSS z extern√≠ho souboru
def load_css(file_name):
    # o √∫rove≈à v√Ω≈° v≈Øƒçi aktu√°ln√≠mu skriptu
    path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", file_name))
    if os.path.exists(path):
        with open(path) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    else:
        st.warning(f"‚ö†Ô∏è CSS soubor `{file_name}` nebyl nalezen. Stylov√°n√≠ nemus√≠ fungovat spr√°vnƒõ.")

load_css("style.css")

#--- Konfigurace ---
ALLOWED_FILE_TYPES = ["txt", "pdf", "docx", "csv", "py", "html", "css", "json", "md"]
DEFAULT_OLLAMA_HOST = "http://localhost:11434"
OLLAMA_VERSION_URL = "/api/version"
OLLAMA_TAGS_URL = "/api/tags"
OLLAMA_GENERATE_URL = "/api/generate"
OLLAMA_CHAT_URL = "/api/chat" # Pou≈æijeme /api/chat pro messages
TOKENIZER_NAME = "gpt2"
# Zv√Ω≈°en√Ω limit pro ned√°vn√© zpr√°vy, proto≈æe /api/chat je efektivnƒõj≈°√≠
RECENT_MESSAGES_TOKEN_LIMIT = 2000 # Nap≈ô. 2000 token≈Ø
HISTORY_SUMMARIZATION_THRESHOLD = 10 # Po kolika zpr√°v√°ch sumarizovat
RECENT_MESSAGES_COUNT_LIMIT = 10 # Kolik posledn√≠ch zpr√°v vz√≠t (jako dal≈°√≠ limit)

try:
    from transformers import GPT2TokenizerFast
    tokenizer = GPT2TokenizerFast.from_pretrained(TOKENIZER_NAME)
    logging.info("Tokenizer byl √∫spƒõ≈°nƒõ inicializov√°n.")
except ImportError:
    logging.warning("Bal√≠ƒçek transformers nen√≠ nainstalov√°n. Pou≈æ√≠v√° se fallback metoda.")
    tokenizer = None
except Exception as e:
    logging.error(f"Chyba p≈ôi inicializaci tokenizeru: {e}")
    tokenizer = None

def count_tokens(text: str) -> int:
    if text is None:
        return 0
    if tokenizer is not None:
        try:
            return len(tokenizer.encode(text))
        except Exception as e:
            logging.warning(f"Chyba tokenizace textu: {text[:50]}... Error: {e}")
            # Fallback na dƒõlen√≠ podle mezer v p≈ô√≠padƒõ chyby tokenizeru
            return len(text.split())
    # Fallback: jednoduch√© dƒõlen√≠ textu na mezery
    return len(text.split())

# --- Pomocn√© funkce ---
def safe_get_digest(model_data: dict) -> str:
    try:
        digest = model_data.get('digest', '')
        if digest and ':' in digest:
            return digest.split(':')[-1][:7] # Zobraz√≠me 7 znak≈Ø hashe
        return digest[:7] if digest else "latest"
    except Exception as e:
        logging.warning(f"Could not parse digest from model_data: {model_data}. Error: {e}")
        return "unknown"

def load_available_models(host: str) -> list:
    try:
        url = f"{host.strip('/')}{OLLAMA_TAGS_URL}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        models_data = response.json().get('models', [])
        formatted_models = [
            f"{model.get('name', 'unknown_model')}:{safe_get_digest(model)}"
            for model in models_data
        ]
        logging.info(f"Loaded models from {host}: {formatted_models}")
        return formatted_models
    except requests.exceptions.RequestException as e:
        st.error(f"Chyba p≈ôi p≈ôipojen√≠ k Ollama API ({host}): {e}")
        logging.error(f"Error connecting to Ollama API ({host}): {e}")
        return []
    except json.JSONDecodeError as e:
        st.error("Chyba p≈ôi ƒçten√≠ odpovƒõdi od Ollama (neplatn√Ω JSON).")
        logging.error(f"Error decoding JSON response from Ollama: {e}")
        return []
    except Exception as e:
        st.error(f"Neoƒçek√°van√° chyba p≈ôi naƒç√≠t√°n√≠ model≈Ø: {e}")
        logging.error(f"Unexpected error loading models: {e}")
        return []

def format_thinking_block(text):
    def replacer(match):
        full_tag = match.group(0)
        attrs = match.group(1) # Zachyt√≠ atributy uvnit≈ô tagu <think ...>
        content = match.group(2).strip() # Zachyt√≠ obsah mezi <think> a </think>

        # Hled√° time="xx.x" v atributech
        time_match = re.search(r'time=["\']?([\d.]+)["\']?', attrs)
        time_text = f"{float(time_match.group(1)):.1f} sekundy" if time_match else "?"

        return f'''
        <details class="think-box">
            <summary>üí≠ P≈ôem√Ω≈°len√≠ modelu (trvalo {time_text}) ‚Äì klikni pro zobrazen√≠</summary>
            <div class="think-content">{content}</div>
        </details>
        '''
    # P≈ôid√°na podpora pro <thinking> tag
    text = re.sub(r'<thinking(.*?)>(.*?)</thinking>', replacer, text, flags=re.DOTALL | re.IGNORECASE)
    return re.sub(r'<think(.*?)>(.*?)</think>', replacer, text, flags=re.DOTALL | re.IGNORECASE)

# --- Funkce pro pamƒõ≈• ---

# üß† Funkce pro shrnut√≠ star≈°√≠ historie
def summarize_history(chat_history, model_name_full, host_url, max_summary_tokens=300, num_messages_to_summarize=10):
    """
    Summarizes a chunk of older chat history.
    Args:
        chat_history (list): The full chat history.
        model_name_full (str): The full name of the selected model (potentially with hash). # P≈ôejmenov√°no pro jasnost
        host_url (str): The Ollama host URL.
        max_summary_tokens (int): Max tokens for the generated summary.
        num_messages_to_summarize (int): How many older messages to include in the summarization prompt.
    Returns:
        str or None: The generated summary or None if error/not needed.
    """
    if len(chat_history) <= HISTORY_SUMMARIZATION_THRESHOLD:
        logging.info("Historie je p≈ô√≠li≈° kr√°tk√° na sumarizaci.")
        return None # Nen√≠ co sumarizovat

    # Vezmeme star≈°√≠ zpr√°vy, ale ne √∫plnƒõ nejstar≈°√≠, abychom sumarizovali relevantn√≠ blok
    # Nap≈ô. vezmeme zpr√°vy od -15 do -5 (10 zpr√°v)
    start_index = max(0, len(chat_history) - num_messages_to_summarize - RECENT_MESSAGES_COUNT_LIMIT)
    end_index = len(chat_history) - RECENT_MESSAGES_COUNT_LIMIT
    history_to_summarize = chat_history[start_index:end_index]

    if not history_to_summarize:
        logging.info("Nebyly nalezeny vhodn√© zpr√°vy k sumarizaci.")
        return None

    logging.info(f"Sumarizace {len(history_to_summarize)} zpr√°v (indexy {start_index}-{end_index-1}).")

    to_summarize_text = ""
    for sender, message, timestamp in history_to_summarize:
        role = "U≈æivatel" if sender == "user" else "Asistent"
        # Odstran√≠me info o tokenech, pokud tam je
        content = re.sub(r'\n\n\*P≈ôibli≈æn√Ω poƒçet token≈Ø: \d+\*$', '', message).strip()
        to_summarize_text += f"{timestamp} - {role}: {content}\n"

    # Odstran√≠me hash z n√°zvu modelu pro API vol√°n√≠ sumarizace
    parts = model_name_full.split(':')
    if len(parts) > 2:
        model_name_for_api = f"{parts[0]}:{parts[1]}"
        logging.info(f"Using model name for summarization API (stripped hash): {model_name_for_api}")
    else:
        model_name_for_api = model_name_full
        logging.info(f"Using model name for summarization API (no hash found): {model_name_for_api}")

    # Pou≈æijeme /api/generate pro sumarizaci (jednodu≈°≈°√≠ prompt)
    prompt = f"Briefly summarize the key points from the following conversation in no more than {max_summary_tokens // 2} words. Focus on facts, decisions and important issues. Ignore greetings and casual conversation.:\n\n{to_summarize_text}"

    payload = {
        "model": model_name_for_api,
        "prompt": prompt,
        "options": {
            "temperature": 0.3, # Ni≈æ≈°√≠ teplota pro faktickou sumarizaci
            "num_predict": max_summary_tokens
        },
        "stream": False
    }
    api_url = f"{host_url.strip('/')}{OLLAMA_GENERATE_URL}"

    try:
        logging.info(f"Odes√≠l√°n√≠ po≈æadavku na sumarizaci na {api_url} s modelem {model_name_for_api}") # Logujeme spr√°vn√© jm√©no
        response = requests.post(api_url, json=payload, timeout=60)
        response.raise_for_status() # Vyvol√° chybu pro 4xx/5xx
        summary = response.json().get("response", "").strip()
        logging.info(f"Sumarizace √∫spƒõ≈°n√°, d√©lka: {len(summary)} znak≈Ø.")
        # Ulo≈æ√≠me i ƒças vytvo≈ôen√≠ shrnut√≠
        return f"Shrnut√≠ konverzace ({datetime.now().strftime('%H:%M')}):\n{summary}"
    except requests.exceptions.RequestException as e:
        logging.error(f"Chyba p≈ôi vol√°n√≠ API pro sumarizaci ({api_url}): {e}")
    except Exception as e:
        logging.error(f"Neoƒçek√°van√° chyba p≈ôi sumarizaci: {e}")
    return None


# üß† Funkce pro z√≠sk√°n√≠ posledn√≠ch zpr√°v do tokenov√©ho limitu
def get_recent_messages_for_context(chat_history, token_limit=RECENT_MESSAGES_TOKEN_LIMIT, count_limit=RECENT_MESSAGES_COUNT_LIMIT):
    """
    Gets recent messages formatted for the /api/chat context, respecting token and count limits.
    Args:
        chat_history (list): Full chat history.
        token_limit (int): Maximum total tokens for recent messages.
        count_limit (int): Maximum number of recent messages to include.
    Returns:
        list: List of message dictionaries [{"role": ..., "content": ...}, ...]
    """
    messages = []
    total_tokens = 0
    # Vezmeme jen posledn√≠ch 'count_limit' zpr√°v pro efektivitu
    recent_history = chat_history[-count_limit:]

    for sender, message, _ in reversed(recent_history):
        # Odstran√≠me info o tokenech a p≈ôem√Ω≈°len√≠, pokud tam je
        content = re.sub(r'\n\n\*P≈ôibli≈æn√Ω poƒçet token≈Ø: \d+\*$', '', message).strip()
        content = re.sub(r'<think.*?>.*?</think>', '', content, flags=re.DOTALL | re.IGNORECASE).strip()
        content = re.sub(r'<thinking.*?>.*?</thinking>', '', content, flags=re.DOTALL | re.IGNORECASE).strip()

        if not content: # P≈ôeskoƒç√≠me pr√°zdn√© zpr√°vy po ƒçi≈°tƒõn√≠
            continue

        token_count = count_tokens(content)

        if total_tokens + token_count > token_limit:
            logging.warning(f"P≈ôekroƒçen tokenov√Ω limit ({token_limit}) pro kr√°tkodobou pamƒõ≈•. Zahrnuto {len(messages)} zpr√°v.")
            break # Stop if adding this message exceeds the limit

        role = "user" if sender == "user" else "assistant"
        messages.insert(0, {"role": role, "content": content}) # P≈ôid√°v√°me na zaƒç√°tek, proto≈æe proch√°z√≠me od konce
        total_tokens += token_count

    logging.info(f"Zahrnuto {len(messages)} ned√°vn√Ωch zpr√°v ({total_tokens} token≈Ø) do kontextu.")
    return messages


# --- Inicializace stavu ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "selected_model" not in st.session_state:
    st.session_state.selected_model = st.session_state.get('model', None) # Start with None
if "system_info" not in st.session_state:
    st.session_state.system_info = ""
if "ollama_host" not in st.session_state:
    st.session_state.ollama_host = DEFAULT_OLLAMA_HOST
# P≈ôid√°me stav pro shrnut√≠ pamƒõti
if "memory_summary" not in st.session_state:
    st.session_state.memory_summary = None # Explicitnƒõ None na zaƒç√°tku

# --- Sidebar ---
with st.sidebar:
    st.subheader("‚öôÔ∏è Nastaven√≠")

    st.session_state.ollama_host = st.text_input(
        "üîó Ollama API adresa",
        value=st.session_state.get("ollama_host", DEFAULT_OLLAMA_HOST),
        help="Adresa bƒõ≈æ√≠c√≠ Ollama instance (nap≈ô. http://localhost:11434)"
    )

    # Tlaƒç√≠tko pro manu√°ln√≠ naƒçten√≠ model≈Ø
    if st.button("üîÑ Naƒç√≠st modely"):
        st.session_state["available_models"] = load_available_models(st.session_state.ollama_host)
        st.rerun() # Znovu naƒçte str√°nku s nov√Ωmi modely

    # Naƒç√≠st modely p≈ôi startu str√°nky, pokud je≈°tƒõ nejsou naƒçten√©
    if "available_models" not in st.session_state:
        st.session_state["available_models"] = load_available_models(st.session_state.ollama_host)

    models = st.session_state.get("available_models", [])
    if not models:
        st.warning("‚ö†Ô∏è Nelze naƒç√≠st modely z Ollama. Zkontrolujte adresu a zda Ollama bƒõ≈æ√≠.")
        models_display = ["Nelze naƒç√≠st modely"]
        st.session_state.selected_model = None
    else:
        models_display = ["Zvolte model"] + models

    # V√Ωbƒõr modelu
    current_selection = st.session_state.get("selected_model")
    try:
        # Najdi index aktu√°lnƒõ vybran√©ho modelu, pokud existuje a je platn√Ω
        if current_selection and current_selection in models_display:
             default_index = models_display.index(current_selection)
        else:
             default_index = 0 # Pokud nen√≠ vybr√°n nebo nen√≠ platn√Ω, vyber "Zvolte model"
    except ValueError:
        default_index = 0
        logging.warning(f"Model '{current_selection}' nenalezen v seznamu, resetuji v√Ωbƒõr.")
        st.session_state.selected_model = None # Reset

    selected_model_value = st.selectbox(
        "ü§ñ Vyber model",
        models_display,
        index=default_index,
        key="selected_model_selector" # Pou≈æijeme jin√Ω kl√≠ƒç pro selectbox
    )

    # Aktualizujeme hlavn√≠ stav modelu jen pokud se zmƒõnil a nen√≠ to placeholder
    if selected_model_value != "Zvolte model" and selected_model_value != "Nelze naƒç√≠st modely":
        st.session_state.selected_model = selected_model_value
    elif selected_model_value == "Zvolte model":
        # Pokud u≈æivatel vybere "Zvolte model", resetujeme stav
        st.session_state.selected_model = None

    # Ostatn√≠ nastaven√≠
    temperature = st.slider("üå°Ô∏è Teplota", 0.0, 1.0, st.session_state.get("temperature", 0.7), 0.05, key="temperature")
    max_tokens = st.slider("üî¢ Max. token≈Ø v odpovƒõdi", 128, 8192, st.session_state.get("max_tokens", 1024), 128, key="max_tokens", help="Maxim√°ln√≠ poƒçet token≈Ø, kter√© model vygeneruje v odpovƒõdi.")
    # top_p = st.slider("üìä Top-p (nucleus sampling)", 0.0, 1.0, st.session_state.get("top_p", 0.9), 0.05, key="top_p") # Top-p m√©nƒõ pou≈æ√≠van√© s Ollama

    use_memory_checkbox = st.checkbox("üß† Zapnout pamƒõ≈• (shrnut√≠ + ned√°vn√© zpr√°vy)", value=st.session_state.get("use_memory", True), key="use_memory")
    if use_memory_checkbox:
        st.caption("‚úÖ Pamƒõ≈• aktivn√≠: Bude pou≈æito shrnut√≠ star≈°√≠ historie (pokud existuje) a ned√°vn√© zpr√°vy.")
    else:
        st.caption("‚ùå Pamƒõ≈• vypnut√°: Modelu bude posl√°n jen aktu√°ln√≠ dotaz a p≈ô√≠padn√Ω kontext z plugin≈Ø.")

    cz_mode = st.checkbox("üá®üáø Vynutit ƒçe≈°tinu", value=st.session_state.get("cz_mode", False), key="cz_mode")
    stream_mode = st.checkbox("üåÄ Streamov√°n√≠ odpovƒõd√≠", value=st.session_state.get("stream_mode", True), key="stream_mode")
    show_tokens_checkbox = st.checkbox("üî¢ Zobrazovat tokeny v odpovƒõdi", value=st.session_state.get("show_tokens", True), key="show_tokens")

    # Tlaƒç√≠tko pro vymaz√°n√≠ historie a pamƒõti
    if st.button("üóëÔ∏è Vymazat historii a pamƒõ≈•"):
        st.session_state.chat_history = []
        st.session_state.memory_summary = None
        logging.info("Chat history and memory summary cleared.")
        st.rerun()

    # Zobrazen√≠ syst√©mov√Ωch informac√≠
    if st.session_state.get("system_info"):
        st.sidebar.caption(st.session_state.system_info)
    else:
        # Pokus√≠me se naƒç√≠st info, pokud je≈°tƒõ nen√≠
        try:
            version_url = f"{st.session_state.ollama_host.strip('/')}{OLLAMA_VERSION_URL}"
            system_response = requests.get(version_url, timeout=5)
            if system_response.status_code == 200:
                version_info = system_response.json()
                st.session_state.system_info = f"Ollama verze: {version_info.get('version', 'N/A')}"
                logging.info(f"Ollama version check successful: {st.session_state.system_info}")
                st.sidebar.caption(st.session_state.system_info)
            else:
                logging.warning(f"Ollama version check failed with status: {system_response.status_code}")
                st.sidebar.caption("‚ö†Ô∏è Nelze ovƒõ≈ôit verzi Ollama.")
        except Exception as e:
            logging.warning(f"Failed to get Ollama version info: {e}")
            st.sidebar.caption("‚ö†Ô∏è Nelze se p≈ôipojit k Ollama pro info.")

# --- Hlavn√≠ ƒç√°st ---
st.title("ü§ñ Lok√°ln√≠ LLM Chat")
# Zobraz√≠me aktu√°lnƒõ vybran√Ω model nebo hl√°≈°ku
display_model_name = st.session_state.selected_model if st.session_state.selected_model else "Nen√≠ vybr√°n ≈æ√°dn√Ω model"
st.caption(f"Powered by Ollama & Streamlit | Model: {display_model_name}")

# Zobrazen√≠ historie chatu
st.markdown('<div id="chat-container" class="chat-container">', unsafe_allow_html=True)
if st.session_state.chat_history:
    for i, (sender, message, timestamp) in enumerate(st.session_state.chat_history):
        css_class = "user-message" if sender == "user" else "bot-message"
        icon = 'üßë' if sender == 'user' else 'ü§ñ'
        sender_name = 'Ty' if sender == 'user' else 'LLM'
        # Pou≈æijeme unik√°tn√≠ kl√≠ƒç pro ka≈æd√Ω blok zpr√°vy
        message_key = f"message_{i}_{sender}"
        # Form√°tov√°n√≠ zpr√°vy s ƒçasem a ikonou
        formatted_message = f"""
        <div class="{css_class}" key="{message_key}">
            <strong>{icon} {sender_name}</strong>
            <div style="margin-top: 0.3rem;">{format_thinking_block(message)}</div>
            <div style="font-size: 0.8rem; color: #888; text-align: right; margin-top: 0.5rem;">{timestamp}</div>
        </div>
        """
        st.markdown(formatted_message, unsafe_allow_html=True)
        # P≈ôid√°me mal√Ω oddƒõlovaƒç mezi zpr√°vami pro lep≈°√≠ ƒçitelnost
        st.markdown("<hr style='margin: 0.5rem 0; border-top: 1px solid #333;'>", unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True) # Konec chat-containeru

# --- Vstupn√≠ oblast s pluginy ---
st.markdown('<div class="input-area">', unsafe_allow_html=True) # Zaƒç√°tek input area

# --- PLUGINY: Wikipedia, Soubory, Web ---
wiki_context = ""
file_context = ""
web_context = ""
include_wiki = False
include_file = False
include_web = False

# Pou≈æijeme sloupce pro p≈ôehlednƒõj≈°√≠ rozlo≈æen√≠ plugin≈Ø pod chatem
col1, col2, col3 = st.columns(3)

with col1:
    with st.expander("üìñ Wikipedia"):
        search_term = st.text_input("üîç Heslo", key="wiki_search")
        if search_term:
            try:
                wikipedia.set_lang("cs")
                search_results = wikipedia.search(search_term, results=5) # V√≠ce v√Ωsledk≈Ø
                if not search_results:
                    st.error(f"‚ùå ≈Ω√°dn√© v√Ωsledky pro '{search_term}'.")
                else:
                    # D√°me u≈æivateli na v√Ωbƒõr, kter√Ω v√Ωsledek chce
                    selected_page = st.radio("Nalezen√© str√°nky:", search_results, key="wiki_select")
                    if selected_page:
                        try:
                            page = wikipedia.page(selected_page, auto_suggest=False) # P≈ôesnƒõj≈°√≠ n√°zev
                            summary = wikipedia.summary(selected_page, sentences=5, auto_suggest=False) # Del≈°√≠ shrnut√≠
                            st.markdown("**Shrnut√≠:**")
                            st.markdown(f"<div class='plugin-content'>{summary}</div>", unsafe_allow_html=True)
                            if st.button(f"Pou≈æ√≠t shrnut√≠ '{selected_page}'", key="wiki_use_button"):
                                include_wiki = True
                                wiki_context = summary
                                st.success(f"‚úÖ Shrnut√≠ '{selected_page}' bude p≈ôid√°no.")

                        except wikipedia.exceptions.DisambiguationError as e:
                            st.warning(f"üîÄ '{selected_page}' m√° v√≠ce v√Ωznam≈Ø. Zkuste up≈ôesnit hled√°n√≠.")
                            st.caption(f"Mo≈ænosti: {e.options[:5]}")
                        except wikipedia.exceptions.PageError:
                            st.error(f"‚ùå Str√°nka '{selected_page}' nebyla nalezena.")

            except Exception as e:
                st.error(f"‚ùå Chyba p≈ôi hled√°n√≠ na Wikipedii: {e}")
                logging.error(f"Wikipedia search error for '{search_term}': {e}")

with col2:
    with st.expander("üìÇ Soubor"):
        uploaded_file = st.file_uploader(
            f"Nahr√°t soubor ({', '.join(ALLOWED_FILE_TYPES)})",
            type=ALLOWED_FILE_TYPES,
            key="file_uploader"
        )
        if uploaded_file is not None:
            try:
                file_type = uploaded_file.name.split(".")[-1].lower()
                bytes_data = uploaded_file.getvalue()
                raw_text = "" # Inicializace

                # Zpracov√°n√≠ podle typu souboru
                if file_type == "txt":
                    try:
                        raw_text = bytes_data.decode("utf-8")
                    except UnicodeDecodeError:
                        raw_text = bytes_data.decode("latin-1", errors='replace')
                elif file_type == "pdf":
                    with fitz.open(stream=bytes_data, filetype="pdf") as doc:
                        raw_text = "\n".join([page.get_text() for page in doc])
                elif file_type == "docx":
                    doc = docx.Document(io.BytesIO(bytes_data))
                    raw_text = "\n".join([para.text for para in doc.paragraphs if para.text.strip()])
                elif file_type == "csv":
                    # Zkus√≠me r≈Øzn√° k√≥dov√°n√≠ a oddƒõlovaƒçe
                    try:
                        df = pd.read_csv(io.BytesIO(bytes_data))
                    except UnicodeDecodeError:
                        df = pd.read_csv(io.BytesIO(bytes_data), encoding='latin-1')
                    except pd.errors.ParserError:
                        try:
                           df = pd.read_csv(io.BytesIO(bytes_data), sep=';')
                        except Exception:
                           df = pd.read_csv(io.BytesIO(bytes_data), sep=';', encoding='latin-1')
                    raw_text = df.to_string()
                elif file_type in ["py", "html", "css", "json", "md"]:
                     try:
                        raw_text = bytes_data.decode("utf-8")
                     except UnicodeDecodeError:
                        raw_text = bytes_data.decode("latin-1", errors='replace')
                     # Zv√Ωraznƒõn√≠ syntaxe pro n√°hled
                     try:
                         lexer = get_lexer_by_name(file_type, stripall=True)
                         formatter = HtmlFormatter(style="monokai", cssclass="syntaxhighlight", linenos=False) # M≈Ø≈æeme p≈ôidat ƒç√≠sla ≈ô√°dk≈Ø: linenos='table'
                         highlighted_code = highlight(raw_text, lexer, formatter)
                         st.markdown("**N√°hled k√≥du/struktury:**")
                         st.markdown(f"<div class='plugin-content code-block'>{highlighted_code}</div>", unsafe_allow_html=True)
                     except Exception as highlight_err:
                         st.warning(f"Chyba p≈ôi zv√Ωraz≈àov√°n√≠ syntaxe: {highlight_err}")
                         st.markdown("**N√°hled textu:**")
                         st.text_area("Obsah:", raw_text[:1000]+"...", height=150, disabled=True, key=f"file_preview_{uploaded_file.id}")
                else:
                    # Ostatn√≠ textov√© form√°ty zobraz√≠me jako prost√Ω text
                    try:
                        raw_text = bytes_data.decode("utf-8")
                    except UnicodeDecodeError:
                        raw_text = bytes_data.decode("latin-1", errors='replace')
                    st.markdown("**N√°hled textu:**")
                    st.text_area("Obsah:", raw_text[:1000]+"...", height=150, disabled=True, key=f"file_preview_{uploaded_file.id}")


                if raw_text.strip():
                    file_context = raw_text # Ulo≈æ√≠me cel√Ω text pro kontext
                    if st.button(f"Pou≈æ√≠t obsah '{uploaded_file.name}'", key="file_use_button"):
                        include_file = True
                        st.success(f"‚úÖ Obsah '{uploaded_file.name}' bude p≈ôid√°n.")
                else:
                    st.warning("‚ö†Ô∏è Obsah souboru je pr√°zdn√Ω nebo jej nelze extrahovat.")

            except Exception as e:
                st.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ souboru '{uploaded_file.name}': {e}")
                logging.error(f"Error processing file '{uploaded_file.name}': {e}\n{traceback.format_exc()}")

with col3:
    with st.expander("üåç Web"):
        web_url = st.text_input("üîó URL adresa", key="web_url")
        if web_url:
            try:
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
                page = requests.get(web_url, timeout=15, headers=headers, allow_redirects=True)
                page.raise_for_status() # Zkontroluje HTTP chyby

                content_type = page.headers.get('Content-Type', '').lower()

                if 'html' in content_type:
                    soup = BeautifulSoup(page.content, "html.parser")
                    # Odstranƒõn√≠ nepot≈ôebn√Ωch tag≈Ø
                    for element in soup(["script", "style", "nav", "footer", "aside", "header", "form", "button", "iframe", "noscript"]):
                        element.decompose()

                    # Pokus o extrakci hlavn√≠ho obsahu (ƒçast√© tagy/t≈ô√≠dy)
                    main_content = soup.find('article') or soup.find('main') or soup.find(role='main') or soup.find(class_=re.compile("content|post|entry|article")) or soup.body

                    if main_content:
                       texts = main_content.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'td', 'th', 'pre', 'code'], limit=200)
                       extracted_text = "\n".join(t.get_text(separator=' ', strip=True) for t in texts if t.get_text(strip=True))
                    else: # Fallback na cel√Ω body, pokud se nepoda≈ôilo naj√≠t hlavn√≠ obsah
                       texts = soup.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'li'], limit=200)
                       extracted_text = "\n".join(t.get_text(separator=' ', strip=True) for t in texts if t.get_text(strip=True))


                    if extracted_text.strip():
                        st.markdown("**Extrahovan√Ω text (max 1000 znak≈Ø):**")
                        st.markdown(f"<div class='plugin-content'>{extracted_text[:1000]}...</div>", unsafe_allow_html=True)
                        if st.button("Pou≈æ√≠t text z webu", key="web_use_button"):
                             include_web = True
                             web_context = extracted_text # Cel√Ω extrahovan√Ω text
                             st.success("‚úÖ Text z webu bude p≈ôid√°n.")
                    else:
                        st.warning("‚ö†Ô∏è Nepoda≈ôilo se extrahovat text z hlavn√≠ch tag≈Ø str√°nky.")
                else:
                    st.warning(f"‚ö†Ô∏è Obsah na URL nen√≠ HTML (typ: {content_type}). Zkuste jinou str√°nku.")

            except requests.exceptions.Timeout:
                 st.error("‚ùå ƒåasov√Ω limit vypr≈°el p≈ôi naƒç√≠t√°n√≠ URL.")
            except requests.exceptions.RequestException as e:
                st.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ URL: {e}")
                logging.error(f"Error fetching URL '{web_url}': {e}")
            except Exception as e:
                st.error(f"‚ùå Neoƒçek√°van√° chyba p≈ôi zpracov√°n√≠ webu: {e}")
                logging.error(f"Error processing web content from '{web_url}': {e}\n{traceback.format_exc()}")

# --- Formul√°≈ô pro odesl√°n√≠ chatu ---
with st.form("chat_form", clear_on_submit=True):
    user_input = st.text_area("üí¨ V√°≈° dotaz:", height=100, key="user_input", placeholder="Zadejte dotaz nebo instrukci...")
    submitted = st.form_submit_button("üöÄ Odeslat")

st.markdown('</div>', unsafe_allow_html=True) # Konec input area

# --- Zpracov√°n√≠ odeslan√©ho formul√°≈ôe ---
if submitted and user_input.strip():
    if not st.session_state.selected_model:
        st.warning("‚ö†Ô∏è Pros√≠m, vyberte model v nastaven√≠ v postrann√≠m panelu.")
    else:
        # 1. P≈ôid√°n√≠ vstupu u≈æivatele do historie
        timestamp = datetime.now().strftime("%H:%M:%S")
        user_message_content = user_input.strip()
        st.session_state.chat_history.append(("user", user_message_content, timestamp))
        logging.info(f"U≈æivatel ({timestamp}): {user_message_content}")

        # 2. P≈ô√≠prava kontextu pro model
        messages_for_api = []
        final_prompt_for_fallback = [] # Pro fallback /api/generate

        # a) Syst√©mov√° zpr√°va (v≈ædy prvn√≠, pokud je pot≈ôeba)
        system_prompt = ""
        if st.session_state.cz_mode:
            system_prompt = "Jsi AI asistent. Odpov√≠dej v√Ωhradnƒõ v ƒçesk√©m jazyce. Buƒè struƒçn√Ω a vƒõcn√Ω."
        # P≈ôid√°me syst√©movou zpr√°vu, pokud nen√≠ pr√°zdn√°
        if system_prompt:
            messages_for_api.append({"role": "system", "content": system_prompt})
            final_prompt_for_fallback.append(f"SYSTEM: {system_prompt}")

        # b) Kontext z plugin≈Ø (p≈ôid√°me p≈ôed pamƒõ≈•)
        plugin_context_text = ""
        if include_wiki and wiki_context:
            plugin_context_text += f"The context from Wikipedia::\n{wiki_context}\n\n"
        if include_file and file_context:
            # Omez√≠me d√©lku pro jistotu
            file_context_limited = file_context[:15000]
            plugin_context_text += f"The context from the file ({uploaded_file.name}):\n{file_context_limited}\n{'...' if len(file_context) > 15000 else ''}\n\n"
        if include_web and web_context:
            # Omez√≠me d√©lku
            web_context_limited = web_context[:15000]
            plugin_context_text += f"The context from website ({web_url}):\n{web_context_limited}\n{'...' if len(web_context) > 15000 else ''}\n\n"

        # P≈ôid√°me kontext z plugin≈Ø jako jednu syst√©movou zpr√°vu (nebo u≈æivatelskou?) - zkus√≠me user
        if plugin_context_text:
            # messages_for_api.append({"role": "system", "content": f"Dopl≈àuj√≠c√≠ kontext:\n{plugin_context_text.strip()}"})
            # Nebo radƒõji jako prvn√≠ "user" zpr√°vu, aby model vƒõdƒõl, ≈æe je to vstup pro aktu√°ln√≠ dotaz
            messages_for_api.append({"role": "user", "content": f"Use the following context to answer:\n{plugin_context_text.strip()}"})
            final_prompt_for_fallback.append(f"CONTEXT:\n{plugin_context_text.strip()}")


        # c) Pamƒõ≈• (pokud je zapnut√°)
        if st.session_state.use_memory:
            # i) Dlouhodob√° pamƒõ≈• (shrnut√≠)
            # Zkus√≠me sumarizovat, pokud je historie dost dlouh√° a shrnut√≠ je≈°tƒõ neexistuje nebo je star√©
            if len(st.session_state.chat_history) > HISTORY_SUMMARIZATION_THRESHOLD + 1 and not st.session_state.memory_summary:
                 # TODO: Mo≈æn√° p≈ôidat ƒçasovou podm√≠nku pro re-sumarizaci?
                 logging.info("Pokus o sumarizaci historie...")
                 model_name_for_api = st.session_state.selected_model # Cel√© jm√©no modelu
                 summary = summarize_history(
                     st.session_state.chat_history[:-1], # Sumarizujeme historii *p≈ôed* posledn√≠m dotazem u≈æivatele
                     st.session_state.selected_model,
                     st.session_state.ollama_host
                 )
                 if summary:
                     st.session_state.memory_summary = summary
                 else:
                     logging.warning("Sumarizace se nezda≈ôila nebo nebyla pot≈ôeba.")


            # P≈ôid√°me existuj√≠c√≠ shrnut√≠ do kontextu
            if st.session_state.memory_summary:
                messages_for_api.append({"role": "system", "content": st.session_state.memory_summary})
                final_prompt_for_fallback.append(f"SUMMARY:\n{st.session_state.memory_summary}")

            # ii) Kr√°tkodob√° pamƒõ≈• (ned√°vn√© zpr√°vy)
            recent_messages = get_recent_messages_for_context(
                st.session_state.chat_history[:-1] # Posledn√≠ zpr√°vy *p≈ôed* aktu√°ln√≠m dotazem u≈æivatele
            )
            messages_for_api.extend(recent_messages) # P≈ôid√°me je do seznamu zpr√°v
            # P≈ôid√°me ned√°vn√© zpr√°vy i do fallback promptu
            if recent_messages:
                 recent_text = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in recent_messages])
                 final_prompt_for_fallback.append(f"RECENT HISTORY:\n{recent_text}")

        # d) Aktu√°ln√≠ dotaz u≈æivatele (jako posledn√≠ u≈æivatelsk√° zpr√°va)
        messages_for_api.append({"role": "user", "content": user_message_content})
        final_prompt_for_fallback.append(f"USER QUERY:\n{user_message_content}")

        # 3. Sestaven√≠ payloadu a vol√°n√≠ API
        selected_model_full = st.session_state.selected_model
        # Odstran√≠me hash (ƒç√°st za druhou dvojteƒçkou), pokud existuje
        parts = selected_model_full.split(':')
        if len(parts) > 2:
            model_name_for_api = f"{parts[0]}:{parts[1]}"
            logging.info(f"Using model name for API (stripped hash): {model_name_for_api}")
        else:
            # Pokud tam hash nen√≠ (nap≈ô. "llama3:latest"), pou≈æijeme cel√© jm√©no
            model_name_for_api = selected_model_full
            logging.info(f"Using model name for API (no hash found): {model_name_for_api}")

        api_url = f"{st.session_state.ollama_host.strip('/')}{OLLAMA_CHAT_URL}"
        payload = {
            "model": model_name_for_api,
            "messages": messages_for_api,
            "options": {
                "temperature": st.session_state.temperature,
                "num_predict": st.session_state.max_tokens,
                # "top_p": st.session_state.top_p, # M≈Ø≈æeme p≈ôidat, pokud chceme
            },
            "stream": st.session_state.stream_mode
        }

        # --- DEBUG: Zobrazen√≠ odes√≠lan√©ho kontextu ---
        with st.expander("üïµÔ∏è Kontext odeslan√Ω modelu (klikni pro zobrazen√≠)", expanded=False):
            st.json(payload) # Zobraz√≠me cel√Ω JSON payload
            # M≈Ø≈æeme p≈ôidat i odhad celkov√©ho poƒçtu token≈Ø kontextu
            context_tokens = sum(count_tokens(msg.get("content", "")) for msg in messages_for_api)
            st.caption(f"Odhadovan√Ω poƒçet token≈Ø v odeslan√©m kontextu: {context_tokens}")
        # --- Konec DEBUG sekce ---

        final_answer = ""
        response_successful = False
        response_duration = 0 # Inicializace doby odezvy

        try:
            logging.info(f"Odes√≠l√°n√≠ po≈æadavku na {api_url} s modelem {model_name_for_api}")
            start_time = time.time() # <-- ZAƒå√ÅTEK Mƒö≈òEN√ç ƒåASU
            with st.spinner("üß† P≈ôem√Ω≈°l√≠m..."):
                response = requests.post(api_url, json=payload, stream=st.session_state.stream_mode, timeout=120) # Timeout 120s
                response.raise_for_status() # Chyby 4xx/5xx vyvolaj√≠ v√Ωjimku

                if st.session_state.stream_mode:
                    # Streamov√°n√≠ odpovƒõdi
                    placeholder = st.empty()
                    assistant_response_content = ""
                    for line in response.iter_lines():
                        if line:
                            try:
                                chunk = json.loads(line.decode('utf-8'))
                                if "message" in chunk and "content" in chunk["message"]:
                                     token = chunk["message"]["content"]
                                     assistant_response_content += token
                                     # Aktualizujeme obsah placeholderu s form√°tov√°n√≠m Markdown
                                     placeholder.markdown(f"**ü§ñ LLM:**\n{assistant_response_content}")

                                # Zkontrolujeme, zda je streamov√°n√≠ dokonƒçeno
                                if chunk.get("done"):
                                    end_time = time.time() # <-- KONEC Mƒö≈òEN√ç (stream)
                                    response_duration = end_time - start_time
                                    logging.info(f"Streamov√°n√≠ dokonƒçeno. Trv√°n√≠: {response_duration:.2f}s")
                                    final_answer = assistant_response_content
                                    response_successful = True
                                    # Zkontrolujeme HTTP status a≈æ po dokonƒçen√≠ streamu, pokud je to mo≈æn√©
                                    # V Ollama streamu nen√≠ status code v ka≈æd√©m chunku.
                                    # Pokud by response objekt s√°m mƒõl status code, zkontrolovali bychom ho zde.
                                    # Prozat√≠m spol√©h√°me na raise_for_status() n√≠≈æe, i kdy≈æ pro stream nemus√≠ b√Ωt ide√°ln√≠.
                                    # response.raise_for_status() # M≈Ø≈æe zp≈Øsobit probl√©my se streamem, pokud chyba nastane pozdƒõji
                                    if response.status_code != 200:
                                         logging.error(f"Stream finished but with error status: {response.status_code} {response.reason}")
                                         # M≈Ø≈æeme zde vyvolat v√Ωjimku nebo nastavit response_successful = False
                                         response.raise_for_status() # Zkus√≠me vyvolat chybu                                    
                                    break # Ukonƒç√≠me smyƒçku

                            except json.JSONDecodeError as json_err:
                                logging.error(f"Chyba dek√≥dov√°n√≠ JSON streamu: {json_err} - Data: {line}")
                                final_answer += f"\n[Chyba v datech streamu: {line}]"
                            except Exception as stream_err:
                                logging.error(f"Neoƒçek√°van√° chyba p≈ôi zpracov√°n√≠ streamu: {stream_err}")
                                final_answer += f"\n[Chyba streamu: {stream_err}]"
                else:
                    # Bez streamov√°n√≠
                    response.raise_for_status() # Zkontrolujeme chybu hned
                    end_time = time.time() # <-- KONEC Mƒö≈òEN√ç (non-stream)
                    response_duration = end_time - start_time
                    logging.info(f"Odpovƒõƒè p≈ôijata (non-stream). Trv√°n√≠: {response_duration:.2f}s")
                    data = response.json()
                    if "message" in data and "content" in data["message"]:
                        final_answer = data["message"]["content"]
                        response_successful = True
                    else:
                        logging.error(f"Odpovƒõƒè API neobsahuje oƒçek√°vanou strukturu ('message': 'content'): {data}")
                        st.error("Chyba: Odpovƒõƒè serveru neobsahovala text odpovƒõdi.")

        except requests.exceptions.Timeout:
            end_time = time.time()
            response_duration = end_time - start_time
            st.error("‚ùå ƒåasov√Ω limit vypr≈°el p≈ôi ƒçek√°n√≠ na odpovƒõƒè od Ollama.")
            logging.error(f"Ollama API request timed out after {response_duration:.2f}s.")
        except requests.exceptions.RequestException as e:
            end_time = time.time()
            response_duration = end_time - start_time
            st.error(f"‚ùå Chyba komunikace s Ollama API ({api_url}): {e}")
            logging.error(f"Ollama API request error after {response_duration:.2f}s: {e}\n{traceback.format_exc()}")
        except Exception as e:
            end_time = time.time()
            response_duration = end_time - start_time
            st.error(f"‚ö†Ô∏è Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ odpovƒõdi: {e}")
            logging.error(f"Unexpected error during Ollama call after {response_duration:.2f}s: {e}\n{traceback.format_exc()}")


        # --- FALLBACK na /api/generate POKUD /api/chat selhal ---
        if not response_successful:
            logging.warning(f"Prim√°rn√≠ vol√°n√≠ /api/chat selhalo nebo nevr√°tilo odpovƒõƒè (trvalo {response_duration:.2f}s), zkou≈°√≠m fallback na /api/generate.")
            api_url_fallback = f"{st.session_state.ollama_host.strip('/')}{OLLAMA_GENERATE_URL}"
            logging.info(f"Fallback URL sestaveno jako: {api_url_fallback}") # P≈ôidejte tento log
            fallback_prompt_text = "\n\n".join(final_prompt_for_fallback) # Spoj√≠me ƒç√°sti promptu

            payload_fallback = {
                "model": model_name_for_api,
                "prompt": fallback_prompt_text,
                "options": {
                    "temperature": st.session_state.temperature,
                    "num_predict": st.session_state.max_tokens
                },
                "stream": st.session_state.stream_mode # Pou≈æijeme stejn√Ω re≈æim streamov√°n√≠
            }

            # --- DEBUG: Zobrazen√≠ fallback kontextu ---
            with st.expander("üïµÔ∏è Fallback Kontext odeslan√Ω modelu (/api/generate)", expanded=False):
                 st.json(payload_fallback)
                 context_tokens_fallback = count_tokens(fallback_prompt_text)
                 st.caption(f"Odhadovan√Ω poƒçet token≈Ø ve fallback kontextu: {context_tokens_fallback}")
            # --- Konec DEBUG sekce ---

            final_answer = "" # Resetujeme final_answer pro fallback
            response_duration = 0 # Resetujeme i duration pro fallback mƒõ≈ôen√≠

            try:
                logging.info(f"Odes√≠l√°n√≠ fallback po≈æadavku na {api_url_fallback} s modelem {model_name_for_api}")
                start_time = time.time() # <-- ZAƒå√ÅTEK Mƒö≈òEN√ç (fallback)
                with st.spinner("üß† P≈ôep√≠n√°m na nouzov√Ω re≈æim (/api/generate)..."):
                    response_fallback = requests.post(api_url_fallback, json=payload_fallback, stream=st.session_state.stream_mode, timeout=120)
                    response_fallback.raise_for_status()

                    if st.session_state.stream_mode:
                        placeholder = st.empty()
                        assistant_response_content = ""
                        for line in response_fallback.iter_lines():
                            if line:
                                try:
                                    data = json.loads(line.decode())
                                    token = data.get("response", "")
                                    assistant_response_content += token
                                    placeholder.markdown(f"**ü§ñ LLM (Fallback):**\n{assistant_response_content}")
                                    if data.get("done"):
                                        end_time = time.time() # <-- KONEC Mƒö≈òEN√ç (fallback stream)
                                        response_duration = end_time - start_time
                                        logging.info(f"Fallback stream dokonƒçen. Trv√°n√≠: {response_duration:.2f}s")
                                        final_answer = assistant_response_content
                                        # Zde bychom tak√© mƒõli zkontrolovat status, pokud to jde
                                        if response_fallback.status_code != 200:
                                            response_fallback.raise_for_status()
                                        response_successful = True # I fallback se poƒç√≠t√° jako √∫spƒõch
                                        break
                                except Exception as e:
                                    logging.error(f"Chyba zpracov√°n√≠ fallback streamu: {e} - Data: {line}")
                                    final_answer += f"\n[Chyba fallback streamu: {line}]"
                    else:
                        response_fallback.raise_for_status()
                        end_time = time.time() # <-- KONEC Mƒö≈òEN√ç (fallback non-stream)
                        response_duration = end_time - start_time
                        logging.info(f"Fallback odpovƒõƒè p≈ôijata (non-stream). Trv√°n√≠: {response_duration:.2f}s")
                        data = response_fallback.json()
                        final_answer = data.get("response", "")
                        if final_answer:
                            response_successful = True
                        else:
                            logging.error(f"Fallback odpovƒõƒè API neobsahuje 'response': {data}")
                            st.error("Chyba: Fallback odpovƒõƒè serveru neobsahovala text.")

            except requests.exceptions.Timeout:
                end_time = time.time()
                response_duration = end_time - start_time
                st.error("‚ùå ƒåasov√Ω limit vypr≈°el i p≈ôi fallback po≈æadavku.")
                logging.error(f"Ollama API fallback request timed out after {response_duration:.2f}s.")
            except requests.exceptions.RequestException as e:
                end_time = time.time()
                response_duration = end_time - start_time
                st.error(f"‚ùå Chyba komunikace s Ollama API i p≈ôi fallbacku ({api_url_fallback}): {e}")
                logging.error(f"Ollama API fallback request error after {response_duration:.2f}s: {e}\n{traceback.format_exc()}")
            except Exception as e:
                end_time = time.time()
                response_duration = end_time - start_time
                st.error(f"‚ö†Ô∏è Neoƒçek√°van√° chyba p≈ôi fallback generov√°n√≠: {e}")
                logging.error(f"Unexpected error during Ollama fallback call after {response_duration:.2f}s: {e}\n{traceback.format_exc()}")


        # 4. Zpracov√°n√≠ fin√°ln√≠ odpovƒõdi (pokud nƒõjak√° je)
        if final_answer.strip():
            bot_message_content_raw = final_answer.strip()
            bot_message_content_formatted = bot_message_content_raw # V√Ωchoz√≠ form√°tovan√° verze

            # --- START: Vlo≈æen√≠ ƒçasu do think tagu, pokud existuje ---
            think_match = re.search(r"<(think|thinking)", bot_message_content_raw, re.IGNORECASE)
            if think_match and response_duration > 0:
                tag_name = think_match.group(1) # 'think' or 'thinking'
                # Pou≈æijeme re.sub s count=1 pro nahrazen√≠ pouze prvn√≠ho v√Ωskytu
                # Nahrad√≠me '<tag ...>' za '<tag time="X.Y" ...>'
                # Regex: r"<({tag_name})([^>]*)>" - najde otev√≠rac√≠ tag a zachyt√≠ atributy
                # Nahrazen√≠: r'<\1 time="{response_duration:.1f}"\2>' - vlo≈æ√≠ time atribut
                try:
                    bot_message_content_formatted = re.sub(
                        rf"<({tag_name})([^>]*)>",
                        rf'<\1 time="{response_duration:.1f}"\2>',
                        bot_message_content_raw,
                        count=1,
                        flags=re.IGNORECASE
                    )
                    logging.info(f"Inserted time={response_duration:.1f}s into <{tag_name}> tag.")
                except Exception as regex_err:
                    logging.error(f"Error inserting time into think tag: {regex_err}")
                    # Pokud n√°hrada sel≈æe, pou≈æijeme p≈Øvodn√≠ text
                    bot_message_content_formatted = bot_message_content_raw
            # --- END: Vlo≈æen√≠ ƒçasu do think tagu ---


            # P≈ôid√°me poƒçet token≈Ø, pokud je zapnuto
            if st.session_state.show_tokens:
                token_count = count_tokens(bot_message_content_raw) # Poƒç√≠t√°me tokeny z p≈Øvodn√≠ odpovƒõdi
                # P≈ôid√°me info o tokenech k potenci√°lnƒõ upraven√©mu obsahu (s vlo≈æen√Ωm ƒçasem)
                # Je d≈Øle≈æit√© NEP≈òID√ÅVAT to P≈òED vol√°n√≠m format_thinking_block
                # Tak≈æe to p≈ôid√°me a≈æ NAKONEC
                # Tuto ƒç√°st p≈ôesuneme a≈æ za format_thinking_block

            timestamp = datetime.now().strftime("%H:%M:%S")

            # Zform√°tujeme POUZE pokud obsahuje think tag (jinak nech√°me plain text)
            # Pou≈æijeme fin√°ln√≠ obsah s potenci√°lnƒõ vlo≈æen√Ωm ƒçasem
            final_display_content = format_thinking_block(bot_message_content_formatted)

            # P≈ôid√°n√≠ informace o tokenech a≈æ teƒè, pokud je t≈ôeba
            if st.session_state.show_tokens:
                final_display_content += f"\n\n*P≈ôibli≈æn√Ω poƒçet token≈Ø: {token_count}*"


            st.session_state.chat_history.append(("bot", final_display_content, timestamp))
            logging.info(f"LLM ({timestamp}): {bot_message_content_raw[:100]}...") # Logujeme jen zaƒç√°tek *p≈Øvodn√≠* odpovƒõdi
            # Vyƒçist√≠me pou≈æit√© pluginy pro dal≈°√≠ kolo (nep≈ôen√°≈°√≠ se automaticky)
            # Toto m≈Ø≈æeme udƒõlat i jinak, pokud chceme pluginy dr≈æet d√©le
            include_wiki = False
            include_file = False
            include_web = False
            st.rerun() # Znovu naƒçte str√°nku a zobraz√≠ novou zpr√°vu
        elif response_successful:
             st.warning("‚ö†Ô∏è Model vr√°til pr√°zdnou odpovƒõƒè.")
             logging.warning("Model returned an empty response despite successful API call.")
        else:
             # Pokud ani fallback neuspƒõl nebo nevr√°til odpovƒõƒè
             st.error("‚ùå Nepoda≈ôilo se z√≠skat odpovƒõƒè od modelu ani nouzov√Ωm re≈æimem.")
             logging.error("Failed to get response from model even with fallback.")


elif submitted and not user_input.strip():
    st.warning("‚ö†Ô∏è Pros√≠m, zadejte dotaz.")